(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{117:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(151)),r={title:"Automating bulk file processing",author:"Joshua Chen",author_url:"https://github.com/Josh-Cena",author_image_url:"https://avatars.githubusercontent.com/u/55398995?s=460&u=88dc0dcb0691877524dd8739db9fde7ed4fa9721&v=4",tags:["bash","personal page"]},c={permalink:"/zh-Hans/blog/2021/03/12/bash",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-blog/2021-3-12-bash.md",description:"Thou shalt not modify 30 files by hand.",date:"2021-03-12T00:00:00.000Z",formattedDate:"March 12, 2021",tags:[{label:"bash",permalink:"/zh-Hans/blog/tags/bash"},{label:"personal page",permalink:"/zh-Hans/blog/tags/personal-page"}],title:"Automating bulk file processing",readingTime:4.585,truncated:!0,prevItem:{title:"Choosing a color palette",permalink:"/zh-Hans/blog/2021/03/15/color"},nextItem:{title:"Building a docusaurus app",permalink:"/zh-Hans/blog/2021/03/09/docusaurus"}},l=[{value:"Downloading images",id:"downloading-images",children:[]},{value:"Changing URLs",id:"changing-urls",children:[]}],s={toc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Thou shalt not modify 30 files by hand.",Object(o.b)("br",{parentName:"p"}),"\n","\u2014Joshua Chen")),Object(o.b)("p",null,"The problem all began with an attempt to migrate all articles from Weixin official account to this site. Copying & pasting all text and re-typesetting was pretty standard task, but it became tricky when it came to the pictures. Look at ",Object(o.b)("a",{parentName:"p",href:"https://mp.weixin.qq.com/s/15D5f4zl5FG7Azl7gcZrxg"},"this article"),", for example. (The localized version is ",Object(o.b)("a",{href:"/docs/Science/cavalieri"},"here"),".)"),Object(o.b)("p",null,"So I was trying to embed the first picture. Initially, to save bandwidth and some GH pages storage space (I try to be as nice to the server as possible, although later I realized that the 200 pictures took up less than half a gigabyte), I planned to link the URL directly, something like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/docs/science/cavalieri.md"',title:'"/docs/science/cavalieri.md"'},"export const Pic = ({children, src}) => (\n    <div style={{textAlign: 'center'}}>\n        <img src={src} />\n        <p style={{color: 'gray', fontSize: 'small'}}>{children}</p>\n    </div>);\n\n...\n\n<Pic src=\"https://mmbiz.qpic.cn/mmbiz_png/JGibibkelET68EfhySWuOboVia7FJX8ehwIAicTz2be2JDN7HIibwibjrpYPP1bTCr1TrjDicauU0P6BLCgFIibZK42GCQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\"></Pic>\n")),Object(o.b)("p",null,"But it turned up as:"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://mmbiz.qpic.cn/mmbiz_png/JGibibkelET6ic8fRiawIMic3jFWfS9o4SpMyc12XdWAmKlWL8hXbgTZcwwksxJaibMcUuXI8z0cKibBVyrTH2Y8DFFfA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"Oops"})),Object(o.b)("p",null,"(The tricky part is it doesn't fail on all occasions. For example, it shows up on my localhost. I hope it fails on the GH pages so I don't look like a nut.)"),Object(o.b)("p",null,"It turns out that Weixin's image host doesn't like outside users sneaking into it. After some struggling, I made up my mind to host all images locally."),Object(o.b)("p",null,"At this time, I already have all images inserted in the documents as ",Object(o.b)("inlineCode",{parentName:"p"},"<Pic>")," tags. The next steps are:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Download all images by the URLs and put them in the correct folders (I want to keep some sort of structure although everything is looked after by the script);"),Object(o.b)("li",{parentName:"ol"},"Change the references of each image to a local URL.")),Object(o.b)("p",null,"The first thing coming to my mind was a bash script. Sadly, my knowledge of Bash was limited to invoking command-line tools like ",Object(o.b)("inlineCode",{parentName:"p"},"yarn")," or ",Object(o.b)("inlineCode",{parentName:"p"},"python"),"\u2014no conditionals, no loops, no variables. So writing each line was a 5-minute StackOverflow search. (A huge thank-you to StackOverflow and all of the amazing contributors!)"),Object(o.b)("h2",{id:"downloading-images"},"Downloading images"),Object(o.b)("p",null,"The core module is probably one line:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"wget --output-document=\"correct/path/file.png\" 'https://mmbiz.qpic.cn/mmbiz_png/JGibibkelET68EfhySWuOboVia7FJX8ehwIAicTz2be2JDN7HIibwibjrpYPP1bTCr1TrjDicauU0P6BLCgFIibZK42GCQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1'\n")),Object(o.b)("p",null,"So two problems:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"How do I generate the ",Object(o.b)("inlineCode",{parentName:"li"},"correct/path/file.png"),"?"),Object(o.b)("li",{parentName:"ol"},"How do I locate all URLs?")),Object(o.b)("p",null,"To write the logic with pseudocode:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'FILE[] files = enumerateFilesUnderPath("./docs/")\nfor file in files:\n    imagePath = "./static/img/" + removeExtension(file.path)\n    makeDirectory(imagePath)\n    string[] links = file.findInFile(/"(?<=<Pic src=\\").*?(?=\\">)"/g)\n    for link in links:\n        imageName = makeSomeMeaningfulName(link)\n        downloadImage(link, imageName, imagePath)\n')),Object(o.b)("p",null,"To begin with, I will need to enumerate all files within the ",Object(o.b)("inlineCode",{parentName:"p"},"/docs")," folder. This is done via the ",Object(o.b)("inlineCode",{parentName:"p"},"find")," command. The result is stored in a list."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"doc_list=( $(find ./docs -mindepth 2) )\n")),Object(o.b)("p",null,"Next, we traverse ",Object(o.b)("inlineCode",{parentName:"p"},"doc_list")," which contains path to each document. We have the weird syntax ",Object(o.b)("inlineCode",{parentName:"p"},"${doc_list[@]}")," instead of the more intuitive ",Object(o.b)("inlineCode",{parentName:"p"},"${doc_list}")," (referencing the ",Object(o.b)("inlineCode",{parentName:"p"},"doc_list")," variable itself) as one would expect with knowledge of JS or Python's for-each loop."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:"{2-5}","{2-5}":!0},'doc_list=( $(find ./docs -mindepth 2) )\nfor doc in "${doc_list[@]}"\ndo\n    # TODO\ndone\n')),Object(o.b)("p",null,"Now given the path to a ",Object(o.b)("inlineCode",{parentName:"p"},"doc"),", we need to generate its respective assets folder in the ",Object(o.b)("inlineCode",{parentName:"p"},"static")," directory. The ",Object(o.b)("inlineCode",{parentName:"p"},"doc")," path looks like: ",Object(o.b)("inlineCode",{parentName:"p"},"docs/Science/cavalieri.md"),". We trim out the file name without the extension ",Object(o.b)("inlineCode",{parentName:"p"},".md")," by the syntax ",Object(o.b)("inlineCode",{parentName:"p"},'"${doc%.*}'),", and append the path ",Object(o.b)("inlineCode",{parentName:"p"},"./static/img/"),", getting the right directory path ",Object(o.b)("inlineCode",{parentName:"p"},"./static/img/docs/Science/cavalieri")," to put the images in. The folder creation is done with ",Object(o.b)("inlineCode",{parentName:"p"},"mkdir"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:"{4}","{4}":!0},'doc_list=( $(find ./docs -mindepth 2) )\nfor doc in "${doc_list[@]}"\ndo\n    mkdir -p "./static/img/""${doc%.*}"\n    # TODO\ndone\n')),Object(o.b)("p",null,"Running the script now will give a correct folder hierarchy without any contents."),Object(o.b)("p",null,"Next, we extract all URLs from the file. Searching in a file with a regex is done using the command ",Object(o.b)("inlineCode",{parentName:"p"},"grep"),". All URLs are enclosed in the format: ",Object(o.b)("inlineCode",{parentName:"p"},'<Pic src="...">'),", so the most natural way is to use regex lookahead and lookbehind. Unluckily, ",Object(o.b)("inlineCode",{parentName:"p"},"grep")," on MacOS doesn't support Perl, so to use the ",Object(o.b)("inlineCode",{parentName:"p"},"-p")," flag, I had to install ",Object(o.b)("inlineCode",{parentName:"p"},"grep")," that provides the GNU-style ",Object(o.b)("inlineCode",{parentName:"p"},"ggrep"),". Now we can grep out all the links."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:"{5}","{5}":!0},'doc_list=( $(find ./docs -mindepth 2) )\nfor doc in "${doc_list[@]}"\ndo\n    mkdir -p "./static/img/""${doc%.*}"\n    links=( $(ggrep -o -P "(?<=<Pic src=\\").*?(?=\\">)" "$doc") )\n    # TODO\ndone\n')),Object(o.b)("p",null,"To further extract the identifier for each image (the base-64 string) and the extension, we have to run ",Object(o.b)("inlineCode",{parentName:"p"},"grep")," on each string."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:"{6-11}","{6-11}":!0},'doc_list=( $(find ./docs -mindepth 2) )\nfor doc in "${doc_list[@]}"\ndo\n    mkdir -p "./static/img/""${doc%.*}"\n    links=( $(ggrep -o -P "(?<=<Pic src=\\").*?(?=\\">)" "$doc") )\n    for link in "${links[@]}"\n    do\n        name=$(echo "$link" | ggrep -o -P "(?<=(jpg|png)/).*(?=/640)")\n        ext=$(echo "$link" | ggrep -o -P "(?<=wx_fmt=).*")\n        # Almost there!\n    done\ndone\n')),Object(o.b)("p",null,"Lastly, it's just the ",Object(o.b)("inlineCode",{parentName:"p"},"wget")," that downloads the image from the link and saves it to the path given by the directory, image name (base-64 identifier), and image extension."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:"{10}","{10}":!0},'doc_list=( $(find ./docs -mindepth 2) )\nfor doc in "${doc_list[@]}"\ndo\n    mkdir -p "./static/img/""${doc%.*}"\n    links=( $(ggrep -o -P "(?<=<Pic src=\\").*?(?=\\">)" "$doc") )\n    for link in "${links[@]}"\n    do\n        name=$(echo "$link" | ggrep -o -P "(?<=(jpg|png)/).*(?=/640)")\n        ext=$(echo "$link" | ggrep -o -P "(?<=wx_fmt=).*")\n        wget --output-document="./static/img/""${doc%.*}""/"$name"."$ext "$link"\n    done\ndone\n')),Object(o.b)("p",null,"And that's it! Run it, and see the cascade of outputs."),Object(o.b)("img",{src:"/zh-Hans/img/blog/2021-3-11/Script.png"}),Object(o.b)("h2",{id:"changing-urls"},"Changing URLs"),Object(o.b)("p",null,"After we've downloaded the images, we will change the references to local URLs. For example,"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/docs/science/cavalieri.md"',title:'"/docs/science/cavalieri.md"'},'<Pic src="https://mmbiz.qpic.cn/mmbiz_png/JGibibkelET68EfhySWuOboVia7FJX8ehwIAicTz2be2JDN7HIibwibjrpYPP1bTCr1TrjDicauU0P6BLCgFIibZK42GCQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></Pic>\n')),Object(o.b)("p",null,"becomes"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/docs/science/cavalieri.md"',title:'"/docs/science/cavalieri.md"'},'<Pic src="/img/docs/Science/cavalieri/JGibibkelET68EfhySWuOboVia7FJX8ehwIAicTz2be2JDN7HIibwibjrpYPP1bTCr1TrjDicauU0P6BLCgFIibZK42GCQ.png"></Pic>\n')),Object(o.b)("p",null,"Well, given the commands introduced above, this task is pretty trivial. Modifying the content of a text file (like a search-and-replace) is done by the command ",Object(o.b)("inlineCode",{parentName:"p"},"sed"),". Because I'm getting tired, this part is left as exercise. You can cheat and look at the code ",Object(o.b)("a",{parentName:"p",href:"https://github.com/Josh-Cena/Personal-page/blob/master/scripts/changeUrl.sh"},"here"),"."))}p.isMDXComponent=!0},151:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,h=b["".concat(r,".").concat(m)]||b[m]||d[m]||o;return n?i.a.createElement(h,c(c({ref:t},s),{},{components:n})):i.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);